(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{U:()=>m});const t=class{constructor(e,t,o=null){this._title=e,this._text=t,this._tags=o||[],this._exists=!0}get title(){return this._title}set title(e){this._title=e}get text(){return this._text}set text(e){this._text=e}get tags(){return this._tags}set tags(e){this._tags=e}addTag(e){this._tags.push(e)}get exists(){return this._exists}set exists(e){this._exists=e}},o=class{constructor(e,t=null){this._text=e,this._color=t,null==t&&(this._color=this.generateColor())}get text(){return this._text}set text(e){this._text=e}get color(){return this._color}set color(e){return this._color}getTextID(){let e=0;for(let t=0;t<this._text.length;t++)e+=this._text.charCodeAt(t);return e}generateColor(){return["red","purple","green","blue","yellow","orange"][this.getTextID()%6]}};class r{constructor(e){this._name=e,this._title=e+"'s",this._todos=[],this._type="workspace"}get todos(){return this._todos}addTodo(e){this._todos.push(e)}removeTodo(e){for(let t=0;t<this._todos.length;t++)if(this._todos[t].title==e)return this._todos.pop(t)}get title(){return this._title}set title(e){this._title=e}get name(){return this._name}get type(){return this._type}}function s(e,t){const o=document.createElement("div");o.classList.add("content"),o.innerHTML=`\n        <h1 class="todo-title">${e.title} Todos</h1>\n        <h2 class="todo-desc">\n            You've got <span class="todo-count">${e.todos.length}</span> todos to\n            complete\n        </h2>\n        <div class="add-new-task">\n            <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n            <input class="add-text-field" type="text" name="add-task-text" placeholder="Add a new task" minlength="3">\n        </div>\n    `,e.todos.forEach((e=>{o.innerHTML+=`\n            <div class="todo-card">\n                <input class="regular-checkbox for-del" type="checkbox" name="add-task" value="del">\n                <div class="card-content">\n                    <h2>${e.title}</h2>\n                    <p>${e.text}</p>\n                    <div class="label-container">\n                    </div>\n                </div>\n            </div>\n        `;let t=o.querySelectorAll(".label-container"),r=t[t.length-1];e.tags.forEach((e=>{let t=document.createElement("div");t.classList.add("label"),t.classList.add(e.color),t.textContent=e.text,r.append(t)}))})),"project"==e.type&&(o.querySelector("h1").style=`\n            background-color: var(--highlight-${e.color});\n            border: 6px solid var(--highlight-${e.color});\n            border-radius: 8px;\n        `);const r=document.querySelector(".pop-up"),n=o.querySelector(".add-text-field");return n.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),n.value.length>=3&&(r.classList.add("active"),document.querySelector(".h1-input").value=n.value,document.querySelector(".p-input").value=""))})),o.querySelectorAll(".for-del").forEach((t=>{t.addEventListener("change",(o=>{if(o.currentTarget.checked){let r=t.closest(".todo-card"),n=o.currentTarget;setTimeout((()=>{n.checked&&(r.classList.add("dissolve"),setTimeout((()=>{e.removeTodo(r.querySelector("h2").textContent),m(s(e),e)}),1e3))}),1e3)}}))})),o}class n extends r{constructor(e,t){super(e),this._color=t,this._type="project"}get color(){return this._color}set color(e){this._color=e}get title(){return this._name}}const c=new r("Today"),l=new r("Week");l.title="This Week's";const a=new n("Homework","purple"),i=new n("Personal","green");let d,u=[c,l,a,i],h=[],p=[new o("js"),new o("project"),new o("todo")],v=new t("Practice using JS module","Create a todo-list application to achieve this");v.tags=p,c.addTodo(v),p=[new o("css"),new o("html5"),new o("work")],v=new t("Practice CSS Flexbox","Use practice tools such as flexbox froggy"),v.tags=p,c.addTodo(v);let g=document.querySelector(".content");function m(e,t){let o=e;g.replaceWith(o),g=o,d=t}function y(e){document.querySelector(".project-container").append(function(e){const t=document.createElement("div");return t.classList.add("project","btn-group"),t.innerHTML=`\n        <div class="proj-color ${e.color}"></div>\n        <div class="proj-title">${e.name}</div>\n    `,t.dataset.project=e.name,t}(e))}y(a),y(i),m(s(c),c);const _=document.querySelectorAll(".btn-group");_.forEach((e=>{e.addEventListener("click",(t=>{if(!e.classList.contains("selected")){if(e.classList.add("selected"),"group-today"==e.id)m(s(c),c);else if("group-week"==e.id)m(s(l),l);else if(null!=e.dataset.project){let t;u.forEach((o=>{o.name==e.dataset.project&&(t=o)})),m(s(t),t)}_.forEach((t=>{e!==t&&t.classList.remove("selected")}))}}))}));const x=document.querySelector("button.create-todo"),S=document.querySelector(".h1-input"),q=document.querySelector(".p-input");x.addEventListener("click",(e=>{let o=!1;if(S.value.length<3?(o=!0,document.querySelector("#h1-error").classList.add("active")):document.querySelector("#h1-error").classList.remove("active"),q.value.length<3?(o=!0,document.querySelector("#p-error").classList.add("active")):document.querySelector("#p-error").classList.remove("active"),o)return;let r=new t(S.value,q.value);r.tags=h,d.addTodo(r),m(s(d),d),document.querySelector(".pop-up").classList.remove("active")})),document.querySelector(".tag-icon").addEventListener("click",(e=>{document.querySelector(".add-tag").classList.toggle("active")})),console.log("test");const f=document.querySelector(".pop-up");window.addEventListener("keydown",(e=>{"Escape"===e.key&&(e.preventDefault(),document.querySelector(".h1-input").value="",document.querySelector(".p-input").value="",f.classList.remove("active"),h=[],document.querySelector(".edit-label-container").replaceChildren())})),document.querySelector(".edit-circle").addEventListener("click",(e=>{document.querySelector(".h1-input").value="",document.querySelector(".p-input").value="",f.classList.remove("active"),h=[],document.querySelector(".edit-label-container").replaceChildren()}));const L=document.querySelector(".add-tag"),k=document.querySelector(".edit-label-container");L.addEventListener("keypress",(e=>{if("Enter"===e.key&&L.value.length>=1){let e=new o(L.value);h.push(e);let t=document.createElement("div");t.classList.add("label"),t.classList.add(e.color),t.textContent=L.value,k.append(t),L.value=""}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,