(()=>{"use strict";const e=class{constructor(e,t,s=null){this._title=e,this._text=t,this._tags=s||[],this._exists=!0}get title(){return this._title}set title(e){this._title=e}get text(){return this._text}set text(e){this._text=e}get tags(){return this._tags}set tags(e){this._tags=e}addTag(e){this._tags.push(e)}get exists(){return this._exists}set exists(e){this._exists=e}},t=class{constructor(e,t="red"){this._text=e,this._color=t}get text(){return this._text}set text(e){this._text=e}get color(){return this._color}set color(e){return this._color}};class s{constructor(e){this._name=e,this._title=e+"'s",this._todos=[],this._type="workspace"}get todos(){return this._todos}addTodo(e){this._todos.push(e)}get title(){return this._title}set title(e){this._title=e}get name(){return this._name}get type(){return this._type}}function o(e){const t=document.createElement("div");t.classList.add("content"),t.innerHTML=`\n        <h1 class="todo-title">${e.title} Todos</h1>\n        <h2 class="todo-desc">\n            You've got <span class="todo-count">${e.todos.length}</span> todos to\n            complete\n        </h2>\n        <div class="add-new-task">\n            <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n            <input class="add-text-field" type="text" name="add-task-text" placeholder="Add a new task" minlength="3">\n        </div>\n    `,e.todos.forEach((e=>{t.innerHTML+=`\n            <div class="todo-card">\n                <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n                <div class="card-content">\n                    <h2>${e.title}</h2>\n                    <p>${e.text}</p>\n                    <div class="label-container">\n                    </div>\n                </div>\n            </div>\n        `;let s=t.querySelectorAll(".label-container"),o=s[s.length-1];e.tags.forEach((e=>{let t=document.createElement("div");t.classList.add("label"),t.classList.add(e.color),t.textContent=e.text,o.append(t)}))})),"project"==e.type&&(t.querySelector("h1").style=`\n            background-color: var(--highlight-${e.color});\n            border: 6px solid var(--highlight-${e.color});\n            border-radius: 8px;\n        `);const s=document.querySelector(".pop-up"),o=t.querySelector(".add-text-field");return o.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),o.value.length>=3&&(s.classList.add("active"),document.querySelector(".h1-input").value=o.value))})),t}class r extends s{constructor(e,t){super(e),this._color=t,this._type="project"}get color(){return this._color}set color(e){this._color=e}get title(){return this._name}}const n=new s("Today"),c=new s("Week");c.title="This Week's";const l=new r("Homework","purple"),a=new r("Personal","green");let i,d=[n,c,l,a],u=[new t("js","red"),new t("project","purple"),new t("todo","orange")],h=new e("Practice using JS module","Create a todo-list application to achieve this");h.tags=u,n.addTodo(h),u=[new t("css","green"),new t("html","yellow"),new t("study","blue")],h=new e("Practice CSS Flexbox","Use practice tools such as flexbox froggy"),h.tags=u,n.addTodo(h);let p=document.querySelector(".content");function v(e,t){let s=e;p.replaceWith(s),p=s,i=t}function g(e){document.querySelector(".project-container").append(function(e){const t=document.createElement("div");return t.classList.add("project","btn-group"),t.innerHTML=`\n        <div class="proj-color ${e.color}"></div>\n        <div class="proj-title">${e.name}</div>\n    `,t.dataset.project=e.name,t}(e))}g(l),g(a),v(o(n),n);const m=document.querySelectorAll(".btn-group");m.forEach((e=>{e.addEventListener("click",(t=>{if(!e.classList.contains("selected")){if(e.classList.add("selected"),"group-today"==e.id)v(o(n),n);else if("group-week"==e.id)v(o(c),c);else if(null!=e.dataset.project){let t;d.forEach((s=>{s.name==e.dataset.project&&(t=s)})),v(o(t),t)}m.forEach((t=>{e!==t&&t.classList.remove("selected")}))}}))}));const y=document.querySelector("button.create-todo"),_=document.querySelector(".h1-input"),x=document.querySelector(".p-input");y.addEventListener("click",(t=>{let s=!1;if(_.value.length<3?(s=!0,document.querySelector("#h1-error").classList.add("active")):document.querySelector("#h1-error").classList.remove("active"),x.value.length<3?(s=!0,document.querySelector("#p-error").classList.add("active")):document.querySelector("#p-error").classList.remove("active"),s)return;let r=new e(_.value,x.value);i.addTodo(r),v(o(i),i),document.querySelector(".pop-up").classList.remove("active")})),console.log("test");const w=document.querySelector(".pop-up");window.addEventListener("keydown",(e=>{"Escape"===e.key&&(e.preventDefault(),document.querySelector(".h1-input").value="",document.querySelector(".p-input").value="",w.classList.remove("active"))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,