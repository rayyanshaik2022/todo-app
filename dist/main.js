(()=>{"use strict";const t=class{constructor(t,e,s=null){this._title=t,this._text=e,this._tags=s||[],this._exists=!0}get title(){return this._title}set title(t){this._title=t}get text(){return this._text}set text(t){this._text=t}get tags(){return this._tags}set tags(t){this._tags=t}addTag(t){this._tags.push(t)}get exists(){return this._exists}set exists(t){this._exists=t}},e=class{constructor(t,e="red"){this._text=t,this._color=e}get text(){return this._text}set text(t){this._text=t}get color(){return this._color}set color(t){return this._color}};class s{constructor(t){this._name=t,this._title=t+"'s",this._todos=[]}get todos(){return this._todos}addTodo(t){this._todos.push(t)}get title(){return this._title}set title(t){this._title=t}get name(){return this._name}}function o(t){const e=document.createElement("div");return e.classList.add("content"),e.innerHTML=`\n        <h1 class="todo-title">${t.title} Todos</h1>\n        <h2 class="todo-desc">\n            You've got <span class="todo-count">${t.todos.length}</span> todos to\n            complete\n        </h2>\n        <div class="add-new-task">\n            <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n            <input class="add-text-field" type="text" name="add-task-text" placeholder="Add a new task">\n        </div>\n    `,t.todos.forEach((t=>{e.innerHTML+=`\n            <div class="todo-card">\n                <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n                <div class="card-content">\n                    <h2>${t.title}</h2>\n                    <p>${t.text}</p>\n                    <div class="label-container">\n                    </div>\n                </div>\n            </div>\n        `;let s=e.querySelectorAll(".label-container"),o=s[s.length-1];t.tags.forEach((t=>{let e=document.createElement("div");e.classList.add("label"),e.classList.add(t.color),e.textContent=t.text,o.append(e)}))})),e}class n extends s{constructor(t,e){super(t),this._color=e}get color(){return this._color}set color(t){this._color=t}get title(){return this._name}}const c=new s("Today"),l=new s("Week");l.title="This Week's";const a=new n("Homework","purple"),i=new n("Personal","green");let r,d=[c,l,a,i],u=[new e("js","red"),new e("project","purple"),new e("todo","orange")],h=new t("Practice using JS module","Create a todo-list application to achieve this");h.tags=u,c.addTodo(h),u=[new e("css","green"),new e("html","yellow"),new e("study","blue")],h=new t("Practice CSS Flexbox","Use practice tools such as flexbox froggy"),h.tags=u,c.addTodo(h);let p=document.querySelector(".content");function g(t){let e=t;p.replaceWith(e),p=e,r=t}function _(t){document.querySelector(".project-container").append(function(t){const e=document.createElement("div");return e.classList.add("project","btn-group"),console.log(t),e.innerHTML=`\n        <div class="proj-color ${t.color}"></div>\n        <div class="proj-title">${t.name}</div>\n    `,e.dataset.project=t.name,e}(t))}_(a),_(i),g(o(c));const x=document.querySelectorAll(".btn-group");x.forEach((t=>{t.addEventListener("click",(e=>{if(!t.classList.contains("selected")){if(t.classList.add("selected"),"group-today"==t.id)g(o(c));else if("group-week"==t.id)g(o(l));else if(null!=t.dataset.project){let e;d.forEach((s=>{s.name==t.dataset.project&&(e=s)})),g(o(e))}x.forEach((e=>{t!==e&&e.classList.remove("selected")}))}}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,