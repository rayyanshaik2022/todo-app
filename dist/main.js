(()=>{"use strict";var e={d:(t,o)=>{for(var s in o)e.o(o,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:o[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{U:()=>g});const t=class{constructor(e,t,o=null){this._title=e,this._text=t,this._tags=o||[],this._exists=!0}get title(){return this._title}set title(e){this._title=e}get text(){return this._text}set text(e){this._text=e}get tags(){return this._tags}set tags(e){this._tags=e}addTag(e){this._tags.push(e)}get exists(){return this._exists}set exists(e){this._exists=e}},o=class{constructor(e,t="red"){this._text=e,this._color=t}get text(){return this._text}set text(e){this._text=e}get color(){return this._color}set color(e){return this._color}};class s{constructor(e){this._name=e,this._title=e+"'s",this._todos=[],this._type="workspace"}get todos(){return this._todos}addTodo(e){this._todos.push(e)}removeTodo(e){for(let t=0;t<this._todos.length;t++)if(this._todos[t].title==e)return this._todos.pop(t)}get title(){return this._title}set title(e){this._title=e}get name(){return this._name}get type(){return this._type}}function r(e,t){const o=document.createElement("div");o.classList.add("content"),o.innerHTML=`\n        <h1 class="todo-title">${e.title} Todos</h1>\n        <h2 class="todo-desc">\n            You've got <span class="todo-count">${e.todos.length}</span> todos to\n            complete\n        </h2>\n        <div class="add-new-task">\n            <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n            <input class="add-text-field" type="text" name="add-task-text" placeholder="Add a new task" minlength="3">\n        </div>\n    `,e.todos.forEach((e=>{o.innerHTML+=`\n            <div class="todo-card">\n                <input class="regular-checkbox for-del" type="checkbox" name="add-task" value="del">\n                <div class="card-content">\n                    <h2>${e.title}</h2>\n                    <p>${e.text}</p>\n                    <div class="label-container">\n                    </div>\n                </div>\n            </div>\n        `;let t=o.querySelectorAll(".label-container"),s=t[t.length-1];e.tags.forEach((e=>{let t=document.createElement("div");t.classList.add("label"),t.classList.add(e.color),t.textContent=e.text,s.append(t)}))})),"project"==e.type&&(o.querySelector("h1").style=`\n            background-color: var(--highlight-${e.color});\n            border: 6px solid var(--highlight-${e.color});\n            border-radius: 8px;\n        `);const s=document.querySelector(".pop-up"),c=o.querySelector(".add-text-field");return c.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),c.value.length>=3&&(s.classList.add("active"),document.querySelector(".h1-input").value=c.value,document.querySelector(".p-input").value=""))})),o.querySelectorAll(".for-del").forEach((t=>{t.addEventListener("change",(o=>{if(o.currentTarget.checked){let s=t.closest(".todo-card"),c=o.currentTarget;setTimeout((()=>{c.checked&&(s.classList.add("dissolve"),setTimeout((()=>{e.removeTodo(s.querySelector("h2").textContent),g(r(e),e)}),1e3))}),1e3)}}))})),o}class c extends s{constructor(e,t){super(e),this._color=t,this._type="project"}get color(){return this._color}set color(e){this._color=e}get title(){return this._name}}const n=new s("Today"),l=new s("Week");l.title="This Week's";const a=new c("Homework","purple"),i=new c("Personal","green");let d,u=[n,l,a,i],h=[new o("js","red"),new o("project","purple"),new o("todo","orange")],p=new t("Practice using JS module","Create a todo-list application to achieve this");p.tags=h,n.addTodo(p),h=[new o("css","green"),new o("html","yellow"),new o("study","blue")],p=new t("Practice CSS Flexbox","Use practice tools such as flexbox froggy"),p.tags=h,n.addTodo(p);let v=document.querySelector(".content");function g(e,t){let o=e;v.replaceWith(o),v=o,d=t}function m(e){document.querySelector(".project-container").append(function(e){const t=document.createElement("div");return t.classList.add("project","btn-group"),t.innerHTML=`\n        <div class="proj-color ${e.color}"></div>\n        <div class="proj-title">${e.name}</div>\n    `,t.dataset.project=e.name,t}(e))}m(a),m(i),g(r(n),n);const y=document.querySelectorAll(".btn-group");y.forEach((e=>{e.addEventListener("click",(t=>{if(!e.classList.contains("selected")){if(e.classList.add("selected"),"group-today"==e.id)g(r(n),n);else if("group-week"==e.id)g(r(l),l);else if(null!=e.dataset.project){let t;u.forEach((o=>{o.name==e.dataset.project&&(t=o)})),g(r(t),t)}y.forEach((t=>{e!==t&&t.classList.remove("selected")}))}}))}));const _=document.querySelector("button.create-todo"),x=document.querySelector(".h1-input"),f=document.querySelector(".p-input");_.addEventListener("click",(e=>{let o=!1;if(x.value.length<3?(o=!0,document.querySelector("#h1-error").classList.add("active")):document.querySelector("#h1-error").classList.remove("active"),f.value.length<3?(o=!0,document.querySelector("#p-error").classList.add("active")):document.querySelector("#p-error").classList.remove("active"),o)return;let s=new t(x.value,f.value);d.addTodo(s),g(r(d),d),document.querySelector(".pop-up").classList.remove("active")})),document.querySelector(".tag-icon").addEventListener("click",(e=>{document.querySelector(".add-tag").classList.toggle("active")})),console.log("test");const S=document.querySelector(".pop-up");window.addEventListener("keydown",(e=>{"Escape"===e.key&&(e.preventDefault(),document.querySelector(".h1-input").value="",document.querySelector(".p-input").value="",S.classList.remove("active"))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,