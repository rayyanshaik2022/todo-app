(()=>{"use strict";const t=class{constructor(t,e="red"){this._text=t,this._color=e}get text(){return this._text}set text(t){this._text=t}get color(){return this._color}set color(t){return this._color}};class e{constructor(t){this._name=t,this._title=t+"'s",this._todos=[]}get todos(){return this._todos}addTodo(t){this._todos.push(t)}get title(){return this._title}set title(t){this._title=t}}const s=new e("Today");new e("Week").title="This Week's";const o=[new t("js","red"),new t("project","todo"),new t("todo")],n=new class{constructor(t,e,s=null){this._title=t,this._text=e,this._tags=s||[],this._exists=!0}get title(){return this._title}set title(t){this._title=t}get text(){return this._text}set text(t){this._text=t}get tags(){return this._tags}set tags(t){this._tags=t}addTag(t){this._tags.push(t)}get exists(){return this._exists}set exists(t){this._exists=t}}("Practice using JS module","Create a todo-list application to achieve this");n.tags=o,s.addTodo(n),document.querySelector(".content").innerHTML+=function(t){const e=document.createElement("div");return e.innerHTML='\n        <h1 class="todo-title">Today\'s Todos</h1>\n        <h2 class="todo-desc">\n            You\'ve got <span class="todo-count">5</span> todos to\n            complete\n        </h2>\n        <div class="add-new-task">\n            <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n            <input class="add-text-field" type="text" name="add-task-text" placeholder="Add a new task">\n        </div>\n    ',t.todos.forEach((t=>{e.innerHTML+=`\n            <div class="todo-card">\n                <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n                <div class="card-content">\n                    <h2>${t.title}</h2>\n                    <p>${t.text}</p>\n                    <div class="label-container">\n                    </div>\n                </div>\n            </div>\n        `;let s=document.querySelectorAll(".label-container"),o=s[s.length-1];console.log(o),t.tags.forEach((t=>{let e=document.createElement("div");e.classList.add("label"),e.classList.add(t.color),o.append(e),console.log("e")}))})),e}(s).innerHTML})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,