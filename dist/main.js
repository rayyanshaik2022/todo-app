(()=>{"use strict";const t=class{constructor(t,e,s=null){this._title=t,this._text=e,this._tags=s||[],this._exists=!0}get title(){return this._title}set title(t){this._title=t}get text(){return this._text}set text(t){this._text=t}get tags(){return this._tags}set tags(t){this._tags=t}addTag(t){this._tags.push(t)}get exists(){return this._exists}set exists(t){this._exists=t}},e=class{constructor(t,e="red"){this._text=t,this._color=e}get text(){return this._text}set text(t){this._text=t}get color(){return this._color}set color(t){return this._color}};class s{constructor(t){this._name=t,this._title=t+"'s",this._todos=[],this._type="workspace"}get todos(){return this._todos}addTodo(t){this._todos.push(t)}get title(){return this._title}set title(t){this._title=t}get name(){return this._name}get type(){return this._type}}function o(t){const e=document.createElement("div");return e.classList.add("content"),e.innerHTML=`\n        <h1 class="todo-title">${t.title} Todos</h1>\n        <h2 class="todo-desc">\n            You've got <span class="todo-count">${t.todos.length}</span> todos to\n            complete\n        </h2>\n        <div class="add-new-task">\n            <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n            <input class="add-text-field" type="text" name="add-task-text" placeholder="Add a new task" minlength="3">\n        </div>\n    `,t.todos.forEach((t=>{e.innerHTML+=`\n            <div class="todo-card">\n                <input class="regular-checkbox" type="checkbox" name="add-task" value="del">\n                <div class="card-content">\n                    <h2>${t.title}</h2>\n                    <p>${t.text}</p>\n                    <div class="label-container">\n                    </div>\n                </div>\n            </div>\n        `;let s=e.querySelectorAll(".label-container"),o=s[s.length-1];t.tags.forEach((t=>{let e=document.createElement("div");e.classList.add("label"),e.classList.add(t.color),e.textContent=t.text,o.append(e)}))})),"project"==t.type&&(e.querySelector("h1").style=`\n            background-color: var(--highlight-${t.color});\n            border: 6px solid var(--highlight-${t.color});\n            border-radius: 8px;\n        `),e}class r extends s{constructor(t,e){super(t),this._color=e,this._type="project"}get color(){return this._color}set color(t){this._color=t}get title(){return this._name}}const n=new s("Today"),c=new s("Week");c.title="This Week's";const l=new r("Homework","purple"),a=new r("Personal","green");let i,d=[n,c,l,a],u=[new e("js","red"),new e("project","purple"),new e("todo","orange")],h=new t("Practice using JS module","Create a todo-list application to achieve this");h.tags=u,n.addTodo(h),u=[new e("css","green"),new e("html","yellow"),new e("study","blue")],h=new t("Practice CSS Flexbox","Use practice tools such as flexbox froggy"),h.tags=u,n.addTodo(h);let p=document.querySelector(".content");function g(t){let e=t;p.replaceWith(e),p=e,i=t}function m(t){document.querySelector(".project-container").append(function(t){const e=document.createElement("div");return e.classList.add("project","btn-group"),e.innerHTML=`\n        <div class="proj-color ${t.color}"></div>\n        <div class="proj-title">${t.name}</div>\n    `,e.dataset.project=t.name,e}(t))}m(l),m(a),g(o(n));const v=document.querySelectorAll(".btn-group");v.forEach((t=>{t.addEventListener("click",(e=>{if(!t.classList.contains("selected")){if(t.classList.add("selected"),"group-today"==t.id)g(o(n));else if("group-week"==t.id)g(o(c));else if(null!=t.dataset.project){let e;d.forEach((s=>{s.name==t.dataset.project&&(e=s)})),g(o(e))}v.forEach((e=>{t!==e&&e.classList.remove("selected")}))}}))}));const _=document.querySelector("button.create-todo"),x=document.querySelector(".h1-input"),y=document.querySelector(".p-input");_.addEventListener("click",(e=>{let s=!1;if(x.value.length<3?(s=!0,document.querySelector("#h1-error").classList.add("active")):document.querySelector("#h1-error").classList.remove("active"),y.value.length<3?(s=!0,document.querySelector("#p-error").classList.add("active")):document.querySelector("#p-error").classList.remove("active"),s)return;let o=new t(x.value,y.value);i.addTodo(o)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,